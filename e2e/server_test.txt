//package e2e
//
//import (
//	"fmt"
//	"github.com/stretchr/testify/require"
//	"net/http"
//	"testing"
//)
//
//const (
//	SET = iota
//	GET
//	GETS
//)
//
//type TestCase[T any] struct {
//	body     T
//	expected string
//	op       int
//}
//
//func Test_SingleNodeBase(t *testing.T) {
//	node := CreateNewNode(true)
//
//	testCases := []any{
//		TestCase[server2.SetRequest]{
//			body: server2.SetRequest{
//				Key:   "foo",
//				Val:   "bar",
//				Flags: 1,
//				Exp:   3600,
//			},
//			expected: `"STORED"`,
//			op:       SET,
//		},
//		TestCase[server2.GetRequest]{
//			body: server2.GetRequest{
//				Key: "foo",
//			},
//			expected: `"bar"`,
//			op:       GET,
//		},
//		TestCase[server2.SetRequest]{
//			body: server2.SetRequest{
//				Key: "foo",
//				Val: "abc",
//			},
//			expected: `"STORED"`,
//			op:       SET,
//		},
//		TestCase[server2.GetRequest]{
//			body: server2.GetRequest{
//				Key: "foo",
//			},
//			expected: `"abc"`,
//			op:       GET,
//		},
//		TestCase[server2.SetRequest]{
//			body: server2.SetRequest{
//				Key: "foo2",
//				Val: "defg",
//			},
//			expected: `"STORED"`,
//			op:       SET,
//		},
//		TestCase[server2.SetRequest]{
//			body: server2.SetRequest{
//				Key: "foo3",
//				Val: "teewx",
//			},
//			expected: `"STORED"`,
//			op:       SET,
//		},
//		TestCase[server2.SetRequest]{
//			body: server2.SetRequest{
//				Key: "foo4",
//				Val: "cslgoff",
//			},
//			expected: `"STORED"`,
//			op:       SET,
//		},
//		TestCase[server2.GetsRequest]{
//			body: server2.GetsRequest{
//				Keys: []string{"foo", "foo2", "foo3", "foo4"},
//			},
//			expected: `"VALUE foo 0 3\r\nabc\r\nVALUE foo2 0 4\r\ndefg\r\nVALUE foo3 0 5\r\nteewx\r\nVALUE foo4 0 7\r\ncslgoff\r\nEND\r\n"`,
//			op:       GETS,
//		},
//	}
//
//	for _, ts := range testCases {
//		var resp string
//		var err error
//		switch x := ts.(type) {
//		case TestCase[server2.SetRequest]:
//			resp, err = handleRequest(node, http.MethodPost, "set", x.body)
//			require.NoError(t, err)
//			require.Equal(t, x.expected, resp)
//		case TestCase[server2.GetRequest]:
//			resp, err = handleRequest(node, http.MethodGet, "get", x.body)
//			require.NoError(t, err)
//			require.Equal(t, x.expected, resp)
//		case TestCase[server2.GetsRequest]:
//			resp, err = handleRequest(node, http.MethodGet, "gets", x.body)
//			require.NoError(t, err)
//			require.Equal(t, x.expected, resp)
//		}
//	}
//}
//
//func Test_Bucket(t *testing.T) {
//	key := "world"
//	k := []byte("hello")
//	k = append(k, key...)
//
//	fmt.Println(k, string(k))
//}
